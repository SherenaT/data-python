{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "88e86733-2d82-4167-8acb-461f75ba6418",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9fe15636-9709-4de7-afce-dce0edc73b75",
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "44ad0f49-14d8-47d4-8378-dfbea954c569",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = [1, 2, 3]\n",
    "y = [1, 4, 9]\n",
    "plt.plot(x,y)\n",
    "plt.title(\"Cupcake Data\")\n",
    "plt.xlabel(\"cupcake flavors\")\n",
    "plt.ylabel(\"cupcake quantity\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "749dd7dc-6647-4187-aa00-41431033fc2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_data = pd.read_csv('CupcakeInvoices.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5789c378-76f9-4c64-a4a2-c757a37eebf1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Joe</th>\n",
       "      <th>Smith</th>\n",
       "      <th>Chocolate</th>\n",
       "      <th>4</th>\n",
       "      <th>3.99</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Eric</td>\n",
       "      <td>Williams</td>\n",
       "      <td>Vanilla</td>\n",
       "      <td>12</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Tyler</td>\n",
       "      <td>Purchase</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>6</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Riley</td>\n",
       "      <td>Weatherly</td>\n",
       "      <td>Vanilla</td>\n",
       "      <td>2</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brittany</td>\n",
       "      <td>Morgan</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>50</td>\n",
       "      <td>1.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jimmy</td>\n",
       "      <td>Wade</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>8</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Jeff</td>\n",
       "      <td>Garcia</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>12</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Amy</td>\n",
       "      <td>Stark</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>12</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Karl</td>\n",
       "      <td>Jenson</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>1</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Sally</td>\n",
       "      <td>Gains</td>\n",
       "      <td>Vanilla</td>\n",
       "      <td>100</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Ron</td>\n",
       "      <td>Blake</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>10</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Daniel</td>\n",
       "      <td>Montenegro</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>5</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Catherine</td>\n",
       "      <td>Alexander</td>\n",
       "      <td>Vanilla</td>\n",
       "      <td>20</td>\n",
       "      <td>1.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Sharleen</td>\n",
       "      <td>Reed</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>4</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Richard</td>\n",
       "      <td>Prentis</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>2</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Jenny</td>\n",
       "      <td>Anderson</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>1</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Kevin</td>\n",
       "      <td>Salvatore</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>5</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Barry</td>\n",
       "      <td>Brown</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>8</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Jayna</td>\n",
       "      <td>Gilbert</td>\n",
       "      <td>Vanilla</td>\n",
       "      <td>6</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Laura</td>\n",
       "      <td>Cooper</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>1</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Lynn</td>\n",
       "      <td>Scott</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>4</td>\n",
       "      <td>2.50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Joe       Smith   Chocolate    4  3.99\n",
       "0        Eric    Williams     Vanilla   12  2.99\n",
       "1       Tyler    Purchase   Chocolate    6  3.99\n",
       "2       Riley   Weatherly     Vanilla    2  2.99\n",
       "3    Brittany      Morgan   Chocolate   50  1.99\n",
       "4       Jimmy        Wade  Strawberry    8  4.99\n",
       "5        Jeff      Garcia  Strawberry   12  4.99\n",
       "6         Amy       Stark   Chocolate   12  3.99\n",
       "7        Karl      Jenson  Strawberry    1  4.99\n",
       "8       Sally       Gains     Vanilla  100  2.99\n",
       "9         Ron       Blake   Chocolate   10  3.99\n",
       "10     Daniel  Montenegro  Strawberry    5  3.99\n",
       "11  Catherine   Alexander     Vanilla   20  1.49\n",
       "12   Sharleen        Reed  Strawberry    4  4.99\n",
       "13    Richard     Prentis   Chocolate    2  3.99\n",
       "14      Jenny    Anderson  Strawberry    1  4.99\n",
       "15      Kevin   Salvatore   Chocolate    5  3.99\n",
       "16      Barry       Brown   Chocolate    8  1.00\n",
       "17      Jayna     Gilbert     Vanilla    6  2.99\n",
       "18      Laura      Cooper   Chocolate    1  3.99\n",
       "19       Lynn       Scott  Strawberry    4  2.50"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "da43dfc9-48f1-4833-9f61-36637e940d23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type('CupcakeInvoices.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d70a3d71-2445-4c92-858e-e800af85a5de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(sample_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "837db89a-388c-45c7-9d25-fd8b3cc2ce49",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-26-2395a44d2422>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-26-2395a44d2422>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    plt.plot(sample_data.Chocolate, sample_data.3.99)\u001b[0m\n\u001b[0m                                               ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "plt.plot(sample_data.Chocolate, sample_data.3.99)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e0296593-e259-4ea2-a72d-747cbfe9fb48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Joe</th>\n",
       "      <th>Smith</th>\n",
       "      <th>Chocolate</th>\n",
       "      <th>4</th>\n",
       "      <th>3.99</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Eric</td>\n",
       "      <td>Williams</td>\n",
       "      <td>Vanilla</td>\n",
       "      <td>12</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Tyler</td>\n",
       "      <td>Purchase</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>6</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Riley</td>\n",
       "      <td>Weatherly</td>\n",
       "      <td>Vanilla</td>\n",
       "      <td>2</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brittany</td>\n",
       "      <td>Morgan</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>50</td>\n",
       "      <td>1.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jimmy</td>\n",
       "      <td>Wade</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>8</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Jeff</td>\n",
       "      <td>Garcia</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>12</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Amy</td>\n",
       "      <td>Stark</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>12</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Karl</td>\n",
       "      <td>Jenson</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>1</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Sally</td>\n",
       "      <td>Gains</td>\n",
       "      <td>Vanilla</td>\n",
       "      <td>100</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Ron</td>\n",
       "      <td>Blake</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>10</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Daniel</td>\n",
       "      <td>Montenegro</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>5</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Catherine</td>\n",
       "      <td>Alexander</td>\n",
       "      <td>Vanilla</td>\n",
       "      <td>20</td>\n",
       "      <td>1.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Sharleen</td>\n",
       "      <td>Reed</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>4</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Richard</td>\n",
       "      <td>Prentis</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>2</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Jenny</td>\n",
       "      <td>Anderson</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>1</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Kevin</td>\n",
       "      <td>Salvatore</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>5</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Barry</td>\n",
       "      <td>Brown</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>8</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Jayna</td>\n",
       "      <td>Gilbert</td>\n",
       "      <td>Vanilla</td>\n",
       "      <td>6</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Laura</td>\n",
       "      <td>Cooper</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>1</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Lynn</td>\n",
       "      <td>Scott</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>4</td>\n",
       "      <td>2.50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Joe       Smith   Chocolate    4  3.99\n",
       "0        Eric    Williams     Vanilla   12  2.99\n",
       "1       Tyler    Purchase   Chocolate    6  3.99\n",
       "2       Riley   Weatherly     Vanilla    2  2.99\n",
       "3    Brittany      Morgan   Chocolate   50  1.99\n",
       "4       Jimmy        Wade  Strawberry    8  4.99\n",
       "5        Jeff      Garcia  Strawberry   12  4.99\n",
       "6         Amy       Stark   Chocolate   12  3.99\n",
       "7        Karl      Jenson  Strawberry    1  4.99\n",
       "8       Sally       Gains     Vanilla  100  2.99\n",
       "9         Ron       Blake   Chocolate   10  3.99\n",
       "10     Daniel  Montenegro  Strawberry    5  3.99\n",
       "11  Catherine   Alexander     Vanilla   20  1.49\n",
       "12   Sharleen        Reed  Strawberry    4  4.99\n",
       "13    Richard     Prentis   Chocolate    2  3.99\n",
       "14      Jenny    Anderson  Strawberry    1  4.99\n",
       "15      Kevin   Salvatore   Chocolate    5  3.99\n",
       "16      Barry       Brown   Chocolate    8  1.00\n",
       "17      Jayna     Gilbert     Vanilla    6  2.99\n",
       "18      Laura      Cooper   Chocolate    1  3.99\n",
       "19       Lynn       Scott  Strawberry    4  2.50"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "1556d361-47d9-4716-9c0c-c39e67e0f653",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Joe</th>\n",
       "      <th>Smith</th>\n",
       "      <th>Chocolate</th>\n",
       "      <th>4</th>\n",
       "      <th>3.99</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Eric</td>\n",
       "      <td>Williams</td>\n",
       "      <td>Vanilla</td>\n",
       "      <td>12</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Tyler</td>\n",
       "      <td>Purchase</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>6</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Riley</td>\n",
       "      <td>Weatherly</td>\n",
       "      <td>Vanilla</td>\n",
       "      <td>2</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brittany</td>\n",
       "      <td>Morgan</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>50</td>\n",
       "      <td>1.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jimmy</td>\n",
       "      <td>Wade</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>8</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Jeff</td>\n",
       "      <td>Garcia</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>12</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Amy</td>\n",
       "      <td>Stark</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>12</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Karl</td>\n",
       "      <td>Jenson</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>1</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Sally</td>\n",
       "      <td>Gains</td>\n",
       "      <td>Vanilla</td>\n",
       "      <td>100</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Ron</td>\n",
       "      <td>Blake</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>10</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Daniel</td>\n",
       "      <td>Montenegro</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>5</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Catherine</td>\n",
       "      <td>Alexander</td>\n",
       "      <td>Vanilla</td>\n",
       "      <td>20</td>\n",
       "      <td>1.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Sharleen</td>\n",
       "      <td>Reed</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>4</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Richard</td>\n",
       "      <td>Prentis</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>2</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Jenny</td>\n",
       "      <td>Anderson</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>1</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Kevin</td>\n",
       "      <td>Salvatore</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>5</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Barry</td>\n",
       "      <td>Brown</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>8</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Jayna</td>\n",
       "      <td>Gilbert</td>\n",
       "      <td>Vanilla</td>\n",
       "      <td>6</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Laura</td>\n",
       "      <td>Cooper</td>\n",
       "      <td>Chocolate</td>\n",
       "      <td>1</td>\n",
       "      <td>3.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Lynn</td>\n",
       "      <td>Scott</td>\n",
       "      <td>Strawberry</td>\n",
       "      <td>4</td>\n",
       "      <td>2.50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Joe       Smith   Chocolate    4  3.99\n",
       "0        Eric    Williams     Vanilla   12  2.99\n",
       "1       Tyler    Purchase   Chocolate    6  3.99\n",
       "2       Riley   Weatherly     Vanilla    2  2.99\n",
       "3    Brittany      Morgan   Chocolate   50  1.99\n",
       "4       Jimmy        Wade  Strawberry    8  4.99\n",
       "5        Jeff      Garcia  Strawberry   12  4.99\n",
       "6         Amy       Stark   Chocolate   12  3.99\n",
       "7        Karl      Jenson  Strawberry    1  4.99\n",
       "8       Sally       Gains     Vanilla  100  2.99\n",
       "9         Ron       Blake   Chocolate   10  3.99\n",
       "10     Daniel  Montenegro  Strawberry    5  3.99\n",
       "11  Catherine   Alexander     Vanilla   20  1.49\n",
       "12   Sharleen        Reed  Strawberry    4  4.99\n",
       "13    Richard     Prentis   Chocolate    2  3.99\n",
       "14      Jenny    Anderson  Strawberry    1  4.99\n",
       "15      Kevin   Salvatore   Chocolate    5  3.99\n",
       "16      Barry       Brown   Chocolate    8  1.00\n",
       "17      Jayna     Gilbert     Vanilla    6  2.99\n",
       "18      Laura      Cooper   Chocolate    1  3.99\n",
       "19       Lynn       Scott  Strawberry    4  2.50"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "50c2513e-0864-4253-9a82-0ab954c57236",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(sample_data.Chocolate, sample_data.Smith)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0dfe970-c98e-4343-b509-6af6b918ce35",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
